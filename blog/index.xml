<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blogs on j3nk0 _ my personal blog</title><link>https://blog.j3nk0.de/blog/</link><description>Recent content in Blogs on j3nk0 _ my personal blog</description><generator>Hugo -- gohugo.io</generator><language>de-de</language><copyright>Copyright (c) 2016, Jens Blawatt; all rights reserved.</copyright><lastBuildDate>Sun, 08 Aug 2021 19:02:49 +0200</lastBuildDate><atom:link href="https://blog.j3nk0.de/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>New Test</title><link>https://blog.j3nk0.de/blog/new-test/</link><pubDate>Sun, 08 Aug 2021 19:02:49 +0200</pubDate><guid>https://blog.j3nk0.de/blog/new-test/</guid><description> hello world 1 hello world test 1 test 2 test 3 google.de&amp;#160;&amp;#x21a9;&amp;#xfe0e;</description></item><item><title>Hugo Blog (Deployment) auf einem Uberspace</title><link>https://blog.j3nk0.de/blog/hugo-blog-auf-uberspace/</link><pubDate>Sat, 08 Oct 2016 00:00:00 +0000</pubDate><guid>https://blog.j3nk0.de/blog/hugo-blog-auf-uberspace/</guid><description>Die Umbauten an meiner kleinen Website hier sind im Gegensatz zu meinen Post relativ hoch frequentiert. Aktuell benutze ich als Blog Engine den Go basierten Static-Site-Generator Hugo.
An dieser Stelle möchte ich einmal beschreiben, wie ich das Deployment des Blogs beim Hoster Uberspace eingerichtet habe.
Das Setup sieht so aus, dass ich Quelltext, also die Rohdaten meines Blogs in einem Git Repository versioniere. Dieses Repository liegt bei Github. Sobald ein Artikel fertiggestellt ist oder andere Änderungen veröffentlicht werden sollen, pushe ich das Repository auf meinen Uberspace.</description></item><item><title>Python Logging Decorator</title><link>https://blog.j3nk0.de/blog/python-logging-decorator/</link><pubDate>Fri, 07 Mar 2014 18:22:56 +0100</pubDate><guid>https://blog.j3nk0.de/blog/python-logging-decorator/</guid><description>Hin und wieder ist es notwendig, die Parameter und die Rückgabewerte einer Funktion zu überprüfen. In Python kann man hierfür das logging Paket und den später folgenden Decorator für die Funktionen verwenden.
Zuvor müssen wir aber erstmal dafür sorgen, dass die Informationen irgendwo ausgegeben werden. In diesem Fall auf der Konsole.
import logging # Einen Logger mit dem Namen foo.bar erstellen. logger = logging.getLogger(&amp;#39;foo.bar&amp;#39;) # Den Log-Level DEBUG setzten. logger.setLevel(logging.DEBUG) # Festlegen, dass die Meldungen auf der Konsole ausgegeben werden sollen.</description></item><item><title>Backbone.js - Nested Models</title><link>https://blog.j3nk0.de/blog/backbonejs-nested-models/</link><pubDate>Sat, 04 Jan 2014 00:00:00 +0000</pubDate><guid>https://blog.j3nk0.de/blog/backbonejs-nested-models/</guid><description>Die Abbildung von Backbone Models auf Basis einer REST Schnittstelle ist ja relativ einfach. Problematisch wurde es aber bei mir, als ich versuchte ein Model zu laden, dessen Attribute ebenfalls wieder Models bzw. eine Collection enthielten.
LÃ¤sst man die Daten direkt von Backbone parsen, erhält man ein Attribut, welches ein einfaches JavaScript Objekt oder ein Array aus diesen enthält. Wie ich dieses Problem gelöst haben, möchte ich euch in einem kleinen Beispiel erklären.</description></item><item><title>VIM als Python IDE</title><link>https://blog.j3nk0.de/blog/vim-as-python-ide/</link><pubDate>Thu, 17 Jan 2013 00:00:00 +0000</pubDate><guid>https://blog.j3nk0.de/blog/vim-as-python-ide/</guid><description>Es gibt einen Menge Anleitungen im Internet, wie man den Editor (G)Vim in eine Entwicklungsumgebung werwandeln kann. Jetzt möchte ich mich in die Liste der Authoren einreihen und meine Beschreibung und Erfahrungen hier dokumentieren.
Ich weiß, dass es viele dieser Anleitungen im Internet git. Ich selbst habe eine Menge davon gelesen. Doch ich muss sagen, dass Ich wirklich einige davon lesen musste, dass ich alles wusste, was ich für mein (g)vim Setup brauchte.</description></item><item><title>Python Namespaces</title><link>https://blog.j3nk0.de/blog/python-namespaces/</link><pubDate>Sat, 12 Jan 2013 00:00:00 +0000</pubDate><guid>https://blog.j3nk0.de/blog/python-namespaces/</guid><description>In Programmiersprachen wie Java oder C# ist es möglich, Namespaces zu nutzen um sein Programm zu struckturieren. In Python nutzt man hierfür Packages. Auf den ersten Blick gibt es jedoch in Python keine Möglichkeit die einzelnen Packete in mehrere Eggs aufzuteilen und damit aussehen zu lassen als wären Sie eins. Dies dient meines Erachtens auch der Übersichtlichtkeit des Programms/Frameworks.
Da ich aus der C#/VB.NET Ecke komme, habe ich ich dieses Feature ein wenig vermisst.</description></item><item><title>MySQL Equivalent zu ORACLE's initcap</title><link>https://blog.j3nk0.de/blog/mysql-oracle-initcap-equivalent/</link><pubDate>Fri, 11 Apr 2008 00:00:00 +0000</pubDate><guid>https://blog.j3nk0.de/blog/mysql-oracle-initcap-equivalent/</guid><description>Die Funktion initcap des DBMS ORACLE verwandelt jedes erste Zeichen eines Wortes in einem übergebenen String in ein Großbuchstaben, der Rest wird klein geschrieben.
Beispiel:
selectinitcap(&amp;#39;jens blawatt&amp;#39;)fromdual;Ergebnis:
Jens Blawatt Diese Funktion gibt es leider in MySQL nicht. Es ist jedoch möglich eigene Funktionen zu schreiben. Hier ist also meine MySQL initcap Version (unter dem Quellcode gibt es die Downloadmöglichkeit):
DELIMITER$$DROPFUNCTIONIFEXISTSinitcap$$CREATEFUNCTIONinitcap(paramVARCHAR(255))RETURNSVARCHAR(255)/* * Author : Jens Blawatt * Website : http://www.Blawatt.de * Description : A MySQL equivalent to ORACLE&amp;#39;s initcap */BEGINDECLAREresultVARCHAR(255)default&amp;#39;&amp;#39;;DECLAREtmpVARCHAR(255)default&amp;#39;&amp;#39;;-- endless repeat WHILE1=1DO-- if it&amp;#39;s the end of the blank spearated string IFINSTR(TRIM(param),&amp;#39; &amp;#39;)=0THENreturntrim(concat(result,UCASE(LEFT(param,1)),LOWER(SUBSTR(param,2))));ENDIF;-- split the first part to tmp SETtmp=SUBSTR(param,1,INSTR(param,&amp;#39; &amp;#39;));-- write first character in capital letter rest in small type SETresult=CONCAT(result,UCASE(LEFT(tmp,1)),LOWER(SUBSTR(tmp,2)));-- remove splitted word from param string SETparam=SUBSTR(param,INSTR(param,&amp;#39; &amp;#39;)+1);ENDWHILE;END$$DELIMITER;</description></item></channel></rss>